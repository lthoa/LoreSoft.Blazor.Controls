@typeparam TItem
@inherits DataComponentBase<TItem>
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization

<CascadingValue IsFixed="true" Value="this" Name="Grid">
    <div class="table-responsive">
        @if (DataToolbar != null)
        {
            @DataToolbar
        }
        @if (DataColumns != null)
        {
            @DataColumns
        }
        <table class="table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer" @attributes="@TableAttributes">
            <colgroup>
                @if (DetailTemplate != null)
                {
                    <col style="width: 32px; padding: 0" />
                }
                @if (Selectable)
                {
                    <col style="width: 32px; padding: 0" />
                }
                @foreach (var column in VisibleColumns)
                {
                    if (string.IsNullOrEmpty(column.Width))
                    {
                        <col />
                    }
                    else
                    {
                        <col style="width: @column.Width" />
                    }
                }
            </colgroup>
            <thead>
                <tr class="text-start text-gray-400 fw-bolder fs-7 text-uppercase gs-0">
                    @if (DetailTemplate != null)
                    {
                        <th class="data-grid-hierarchy-cell">
                        </th>
                    }
                    @if (Selectable)
                    {
                        <th class="w-10px pe-2 sorting_disabled">
                            <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
                                <input class="form-check-input" type="checkbox" checked="@IsAllSelected()" @onchange="ToggleSelectAll">
                            </div>
                        </th>
                    }
                    @foreach (var column in VisibleColumns)
                    {
                        @if (Sortable && column.Sortable)
                        {
                            <th @key="column" class="@column.HeaderClass @SortCss(column)" @onclick="() => SortByAsync(column)">
                                @HeaderFragment(column)
                            </th>
                        }
                        else
                        {
                            <th @key="column" class="@column.HeaderClass">
                                @HeaderFragment(column)
                            </th>
                        }
                    }
                </tr>
            </thead>
            <tbody>
                @if (DataError != null)
                {
                    <tr>
                        <td colspan="@CellCount" class="data-grid-error">
                            @if (ErrorTemplate != null)
                            {
                                @ErrorTemplate(DataError)
                            }
                            else
                            {
                                @DataError.Message
                            }
                        </td>
                    </tr>
                }
                else if (View == null)
                {
                    for (int i = 0; i < 5; i++)
                    {
                        <tr key="i">
                            @if (DetailTemplate != null)
                            {
                                <td class="data-grid-hierarchy-cell">
                                </td>
                            }
                            @if (Selectable)
                            {
                                <td class="data-grid-selector-cell">
                                </td>
                            }
                            @foreach (var column in VisibleColumns)
                            {
                                <td @key="column" class="@column.ClassName">
                                    <Skeleton />
                                </td>
                            }
                        </tr>
                    }
                }
                else if (View.Count == 0)
                {
                    <tr>
                        <td colspan="@CellCount" class="data-grid-empty">
                            @if (EmptyTemplate != null)
                            {
                                @EmptyTemplate
                            }
                            else
                            {
                                <span>No records to display</span>
                            }
                        </td>
                    </tr>
                }
                else if (Virtualize)
                {
                    <Virtualize TItem="TItem"
                                Items="View"
                                Context="item"
                                ItemSize="VirtualItemSize"
                                OverscanCount="VirtualOverscan">
                        @RowFragment(item)
                    </Virtualize>
                }
                else
                {
                    @foreach (var item in View)
                    {
                        @RowFragment(item)
                    }
                }
            </tbody>
            @if (VisibleColumns.Any(c => c.FooterTemplate != null))
            {
                <tfoot>
                    <tr>
                        @foreach (var column in VisibleColumns)
                        {
                            <td @key="column">
                                @if (column.FooterTemplate != null)
                                {
                                    @column.FooterTemplate
                                }
                            </td>
                        }
                    </tr>
                </tfoot>
            }
        </table>
    </div>
    @if (DataPagination != null)
    {
        <CascadingValue IsFixed="true" Value="Pager" Name="PagerState">
            <div class="row pt-8">
                @DataPagination(this)
            </div>
        </CascadingValue>
    }
    @if (IsLoading)
    {
        @if (LoadingTemplate == null)
        {
            <LoadingBlock IsLoading="true"/>
        }
        else
        {
            @LoadingTemplate
        }
    }
</CascadingValue>

@code
{
    protected int viewOrder = 1;
    
    private string SortCss(DataColumn<TItem> column)
    {
        @if (column.Sortable && column.SortIndex >= 0)
        {
            return column.SortDescending ? "sorting_desc" : "sorting_asc";
        }

        return "";
    }


    protected RenderFragment<DataColumn<TItem>> HeaderFragment => column => __builder =>
    {
    @if (column.HeaderTemplate != null)
        {
            @column.HeaderTemplate
        }
        else
        {
            @column.HeaderTitle()
        }
    };


    protected RenderFragment<TItem> RowFragment => item => __builder =>
    {
    <tr @key="new {item, i = 0}" class="@(viewOrder++ % 2 == 0 ? "odd" : "event") @RowClass" style="@(RowStyle?.Invoke(item))">
        @if (DetailTemplate != null)
            {
            <td class="data-grid-hierarchy-cell">
                <button type="button"
                        @onclick="() => ToggleDetailRow(item)"
                        class="data-grid-hierarchy-button @(IsRowExpanded(item) ? "data-grid-hierarchy-button-expanded" : "data-grid-hierarchy-button-collapsed" )"></button>
            </td>
            }
        @if (Selectable)
            {
            <td>
                <div class="form-check form-check-sm form-check-custom form-check-solid">
					<input class="form-check-input" type="checkbox" checked="@(IsRowSelected(item))" @onchange="() => ToggleSelectRow(item)" />
				</div>
            </td>
            }
        @foreach (var column in VisibleColumns)
            {
            <td @key="column" class="@column.ClassName" style="@(column.Style?.Invoke(item))" @attributes="@column.Attributes">
                @if (column.Template != null)
                    {
                    @column.Template(item)
                    }
                    else
                    {
                    @column.CellValue(item)
                    }
            </td>
            }
    </tr>
    @if (DetailTemplate != null && IsRowExpanded(item))
        {
        <tr @key="new {item, i = 1}" class="data-grid-detail-row">
            <td colspan="@CellCount" class="data-grid-detail-cell">
                @DetailTemplate(item)
            </td>
        </tr>
        }
    };
}
