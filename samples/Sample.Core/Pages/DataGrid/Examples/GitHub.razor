@using Sample.Core.Models.GitHub
@using Sample.Core.Services

@inject GitHubClient GitHubClient

<h3>GitHub</h3>

<input type="text" class="form-control" @bind-value="SearchText.Value" @bind-value:event="oninput" />



<DataGrid DataProvider="LoadData" Sortable="false" Selectable="true" @ref="Grid">
    <DataColumns>
        <DataColumn TItem="Repository" Property="p => p.Id" Width="70px" />
        <DataColumn TItem="Repository" Property="p => p.Name" />
        <DataColumn TItem="Repository" Property="p => p.Description" />
        <DataColumn TItem="Repository" Property="p => p.Owner.Login" Title="Login" />
        <DataColumn TItem="Repository" Property="p => p.ForksCount" Title="Forks" Width="90px" />
        <DataColumn TItem="Repository" Property="p => p.StargazersCount" Title="Stars" Width="90px" />
        <DataColumn TItem="Repository" Property="p => p.SubscribersCount" Title="Watches" Width="90px" />
    </DataColumns>
    <DataPagination Context="grid">
        <DataPager PageSize="10" />
        <DataSizer />
        <div>@grid.Pager.StartItem - @grid.Pager.EndItem of @grid.Pager.Total</div>
    </DataPagination>
    <DetailTemplate Context="item">
        <div class="github-repository clearfix">
            <div class="github-avatar"><img src="@item.Owner.AvatarUrl"></div>
            <div class="github-meta">
                <div class="github-title">@item.FullName</div>
                <div class="github-description">@item.Description</div>
                <div class="github-statistics">
                    <div class="github-forks"><i class="fas fa-bolt"></i> @item.ForksCount Forks</div>
                    <div class="github-stargazers"><i class="fas fa-star"></i> @item.StargazersCount Stars</div>
                    <div class="github-watchers"><i class="fas fa-eye"></i> @item.SubscribersCount Watchers</div>
                </div>
            </div>
        </div>
    </DetailTemplate>
</DataGrid>


@code {
    private DataGrid<Repository> Grid { get; set; }

    private DebounceValue<string> SearchText { get; set; }

    public Repository SelectedRepository { get; set; }

    public async ValueTask<DataResult<Repository>> LoadData(DataRequest request)
    {
        var value = SearchText.Value;
        var result = await GitHubClient.SearchRepositories(value, request.Page, request.PageSize);

        var response = new DataResult<Repository>(result.TotalCount, result.Items);
        return response;
    }

    protected override void OnInitialized()
    {
        SearchText = new DebounceValue<string>("blazor")
        {
            Trigger = _ => InvokeAsync(() => Grid.RefreshAsync(true))
        };
    }

}
